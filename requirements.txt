Exercise

Implement a console-based social networking application (similar to Twitter) satisfying the scenarios below.

Scenarios
~~~~~~~~~

    Posting: Alice can publish messages to a personal timeline

    > Alice -> I love the weather today
    > Bob -> Damn! We lost!
    > Bob -> Good game though.

    -------------

    Reading: Bob can view Alice’s timeline

    > Alice
    I love the weather today (5 minutes ago)
    > Bob
    Good game though. (1 minute ago)
    Damn! We lost! (2 minutes ago)

    --------------

    Following: Charlie can subscribe to Alice’s and Bob’s timelines, and view an aggregated list of all subscriptions

    > Charlie -> I'm in New York today! Anyone want to have a coffee?
    > Charlie follows Alice
    > Charlie wall
    Charlie - I'm in New York today! Anyone want to have a coffee? (2 seconds ago)
    Alice - I love the weather today (5 minutes ago)

    > Charlie follows Bob
    > Charlie wall
    Charlie - I'm in New York today! Anyone wants to have a coffee? (15 seconds ago)
    Bob - Good game though. (1 minute ago)
    Bob - Damn! We lost! (2 minutes ago)
    Alice - I love the weather today (5 minutes ago)

    ---------------

Details
~~~~~~~
- The application must use the console for input and output

- Users submit commands to the application. There are four commands. “posting”, “reading”, etc. are not part of the commands; commands always start with the user’s name.
    posting: <user name> -> <message>
    reading: <user name>
    following: <user name> follows <another user>
    wall: <user name> wall

- Don't worry about handling any exceptions or invalid commands. Assume that the user will always type the correct commands. Just focus on the sunny day scenarios.

- Don’t bother making it work over a network or across processes. It can all be done in memory, assuming that users will all use the same terminal.

- Non-existing users should be created as they post their first message. Application should not start with a pre-defined list of users.

- Use whichever language, libraries, frameworks and tools you like.

- Provide instructions on how to run the application.

IMPORTANT: Focus on writing the best code you can produce. Do not rush. Take as much time as you need; there is no deadline.
Code Submission
Push the code to your own GitHub account, as a public project, and send us the link.



Plan
~~~~~

1. Implement timelines:
    - when user first posts a message they are signed up
    - post a few messages and verify they can be viewed

2. Implement wall:
    - express following domain concept

3. Hook up to the proper console
    - print instructions at start of the application



Ambiguous Requirements
~~~~~~~~~~~~~~~~~~~~~~
1. Chose to round down for the temporal notification at the end of each displayed message

2. Chose not to group by weeks, months, or years on temporal messages, but it's easy to add

3. Assume that when a tweeter follows another tweeter, they see messages that occurred before they began following them

4. Assumed that users can begin following other users even if they have not posted a message




Trade Offs & Design Decisions - I would be more than happy to create a revised version with these changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. No unit tests for Tweetsystems. I drove the design of the application using TDD (starting with acceptance tests). I was able to test enough of the tweetsystem's behaviour without the need for unit tests. To add unit tests I would have needed to introduce further abstractions which would increase the complexity of the code (more interfaces, indirection, tests causing refactoring friction).

I tend to follow the GOOS principle of letting abstractions emerge.

2. I chose to commit to the code in a broken state because:
    - I was working from multiple machines (home, laptop, office)
    - I thought it was document my development workflow more transparently for you to asses

3. If the number of AAT tests grew I would have created a strongly-typed object to represent the response to concepts in tests more explicit. The repitition of response.split("\n") is becoming a small, but not enough so far (changing it might take the design in the wrong direction - we won't know until we get more scenarios and domain knowledge)

4. Overall my approach to this example was to test a sensible amount but keep complexity low since the codebase is small and easier to understand this way